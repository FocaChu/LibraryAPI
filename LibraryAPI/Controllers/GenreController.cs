using LibraryAPI.Context;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace LibraryAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class GenreController : ControllerBase
    {
        public Db _contex;

        public GenreController(Db context)
        {
            _contex = context;
        }

        [HttpGet]
        public async Task<ActionResult<List<Genre>>> GetAllGenres()
        {
            var genres = await _contex.Genres.ToListAsync();

            // Check if any genres were found

            if (genres == null || !genres.Any())
            {
                return NotFound("No genres found.");
            }

            return Ok(genres);
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<Genre>> GetGenreById(int id)
        {
            var genre = await _contex.Genres.FindAsync(id);

            if (genre == null)
            {
                return NotFound($"Genre with ID {id} not found.");
            }

            return Ok(genre);
        }

        [HttpPut("{id}")]
        public async Task<ActionResult<Genre>> UpdateGenre(int id, [FromBody] GenreDto updatedGenre)
        {
            if (updatedGenre == null)
            {
                return BadRequest("Genre data is invalid.");
            }

            var genre = await _contex.Genres.FindAsync(id);

            if (genre == null)
            {
                return NotFound($"Genre with ID {id} not found.");
            }

            genre.Name = updatedGenre.Name;

            _contex.Genres.Update(genre);

            await _contex.SaveChangesAsync();

            return Ok(genre);

        }

        [HttpPost]
        public async Task<ActionResult<Genre>> CreateAuthor([FromBody] GenreDto newGenre)
        {
            if (newGenre == null)
            {
                return BadRequest("Genre data is invalid.");
            }

            Genre genre = new Genre
            {
                Id = 0, // Id will be generated by the database
                Name = newGenre.Name,
            };

            _contex.Genres.Add(genre);

            await _contex.SaveChangesAsync();

            return CreatedAtAction(nameof(GetGenreById), new { id = genre.Id }, genre);
        }
    }
}
