using LibraryAPI.Context;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace LibraryAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AutorController : ControllerBase
    {
        public Db _contex;

        public AutorController(Db context)
        {
            _contex = context;
        }

        [HttpGet]
        public async Task<ActionResult<List<Author>>> GetAllAuthors()
        {
            var authors = await _contex.Authors.ToListAsync();

            if (authors == null || !authors.Any())
            {
                return NotFound("No authors found.");
            }

            return Ok(authors);
        }

        [HttpPost]
        public async Task<ActionResult<Author>> CreateAuthor([FromBody] AuthorDto newAuthor)
        {
            if (newAuthor == null)
            {
                return BadRequest("Author data is invalid.");
            }

            Author author = new Author
            {
                Id = 0, // Id will be generated by the database
                Name = newAuthor.Name,
                Birth = newAuthor.Birth,
                Nacionality = newAuthor.Nacionality
            };

            _contex.Authors.Add(author);

            await _contex.SaveChangesAsync();

            return CreatedAtAction(nameof(GetAllAuthors), new { id = author.Id }, author);
        }

        [HttpDelete("{id}")]
        public async Task<ActionResult> DeleteAuthor(int id)
        {
            var author = await _contex.Authors.FindAsync(id);

            if (author == null)
            {
                return NotFound($"Author with ID {id} not found.");
            }

            _contex.Authors.Remove(author);

            await _contex.SaveChangesAsync();

            return Ok(author);
        }
    }
}
